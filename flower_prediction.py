# -*- coding: utf-8 -*-
"""Flower_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Mm1Mq-ho9FPKcmJH9e09PoSD1keQX4f
"""

import streamlit as st
import numpy as np
import PIL
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential, load_model
import pathlib

# Load data
dataset_url = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"
data_dir = tf.keras.utils.get_file('flower_photos', origin=dataset_url, untar=True)
data_dir = pathlib.Path(data_dir)

# Create the training dataset
img_height, img_width = 150, 150
batch_size = 32

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size
)

# Create the validation dataset
val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  image_size=(img_height, img_width),
  batch_size=batch_size
)

# View the classes
class_names = train_ds.class_names

#Mount google drive
#from google.colab import drive
#drive.mount('/content/drive')

# Load the saved model
model_path = "flower_model.h5"
model = load_model(model_path)

# Function to preprocess and predict the image
def predict_image(img):
  img = img.resize((img_height, img_width))
  img_array = tf.keras.preprocessing.image.img_to_array(img)
  img_array = tf.expand_dims(img_array, 0)
  img_array = img_array / 255.0
  prediction = model.predict(img_array)[0]
  return {class_names[i]: float(prediction[i]) for i in range(5)}

# Streamlit app
st.title("Flower Image Classification")
uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = PIL.Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)
    prediction = predict_image(image)
    st.write("Prediction:")
    for flower_class, probability in prediction.items():
        st.write(flower_class, ": ", probability)
